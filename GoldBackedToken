pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract GoldBackedToken is ERC20 {
    AggregatorV3Interface internal priceFeed;
    address public owner;
    bool public isActive;
    mapping(address => bool) public blacklist;

    constructor() ERC20("GoldBackedToken", "HAUv") {
        priceFeed = AggregatorV3Interface(0xC5981F461d74c46eB4b0CF3f4Ec79f025573B0Ea);
        owner = msg.sender;
        isActive = true;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    modifier contractIsActive() {
        require(isActive, "Contract is currently inactive");
        _;
    }

    modifier notBlacklisted(address _account) {
        require(!blacklist[_account], "Address is blacklisted");
        _;
    }

    // Función para obtener el precio actual del oro en USD
    function getLatestGoldPrice() public view returns (int) {
        (
            , 
            int price,
            ,
            ,
        ) = priceFeed.latestRoundData();
        return price;
    }

    // Función para actualizar la fuente del feed del precio del oro
    function updatePriceFeed(address newPriceFeed) public onlyOwner {
        priceFeed = AggregatorV3Interface(newPriceFeed);
    }

    // Función para ajustar la oferta total del token basada en el precio del oro
    function adjustTokenSupply() public onlyOwner contractIsActive {
        int goldPrice = getLatestGoldPrice();
        
        uint256 supply = totalSupply();

        if (goldPrice > int(supply)) {
            _mint(owner, uint256(goldPrice) - supply);
        } else if (goldPrice < int(supply)) {
            _burn(owner, supply - uint256(goldPrice));
        }
    }

    // Función para permitir a los usuarios comprar tokens
    function buyTokens() public payable contractIsActive notBlacklisted(msg.sender) {
        int goldPrice = getLatestGoldPrice();
        uint256 tokensToBuy = uint256(msg.value * uint256(goldPrice));
        _mint(msg.sender, tokensToBuy);
    }

    // Función para quemar tokens
    function burnTokens(uint256 amount) public contractIsActive notBlacklisted(msg.sender) {
        _burn(msg.sender, amount);
    }

    // Función para agregar una dirección a la lista negra
    function addToBlacklist(address _account) public onlyOwner {
        blacklist[_account] = true;
    }

    // Función para eliminar una dirección de la lista negra
    function removeFromBlacklist(address _account) public onlyOwner {
        blacklist[_account] = false;
    }

    // Función para activar o desactivar el contrato
    function setContractActive(bool _isActive) public onlyOwner {
        isActive = _isActive;
    }

    // Función para retirar ETH acumulado en el contrato
    function withdrawETH() public onlyOwner {
        payable(owner).transfer(address(this).balance);
    }
}
